const { google } = require('googleapis');

class GoogleSheetsService {
  constructor() {
    this.sheets = null;
    this.spreadsheetId = process.env.GOOGLE_SHEETS_SPREADSHEET_ID;
    this.initializeSheets();
  }

  async initializeSheets() {
    try {
      // Parse the service account credentials from environment variable
      const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS);
      
      const auth = new google.auth.GoogleAuth({
        credentials,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });

      this.sheets = google.sheets({ version: 'v4', auth });
    } catch (error) {
      console.error('Error initializing Google Sheets service:', error);
      throw new Error('Failed to initialize Google Sheets service');
    }
  }

  async appendRegistrationData(formData) {
    try {
      if (!this.sheets) {
        await this.initializeSheets();
      }

      const { formType, registrationId, fullName, email, mobile, dateOfBirth, address, aadharNumber, children = [], eventDetail = {} } = formData;

      // Prepare the row data based on form type
      let rowData;
      
      if (formType === 'eventRegistration') {
        rowData = [
          registrationId || '',
          new Date().toISOString(),
          'Event Registration',
          fullName || '',
          email || '',
          mobile || '',
          dateOfBirth || '',
          address || '',
          aadharNumber || '',
          eventDetail.eventName || 'Dream Foundation Event',
          eventDetail.eventDate || '',
          eventDetail.eventTime || '',
          eventDetail.eventLocation || '',
          children.length || 0,
          // Children data (flattened for easier viewing in sheets)
          ...this.flattenChildrenData(children)
        ];
      } else if (formType === 'admissionRegistration') {
        rowData = [
          registrationId || '',
          new Date().toISOString(),
          'Admission Registration',
          fullName || '',
          email || '',
          mobile || '',
          dateOfBirth || '',
          address || '',
          aadharNumber || '',
          '', // Event name (empty for admission)
          '', // Event date (empty for admission)
          '', // Event time (empty for admission)
          '', // Event location (empty for admission)
          children.length || 0,
          // Children data (flattened for easier viewing in sheets)
          ...this.flattenChildrenData(children)
        ];
      } else {
        throw new Error('Unsupported form type');
      }

      // Determine the sheet name based on form type
      const sheetName = formType === 'eventRegistration' ? 'Event Registrations' : 'Admission Registrations';

      // Append the data to the sheet
      const response = await this.sheets.spreadsheets.values.append({
        spreadsheetId: this.spreadsheetId,
        range: `${sheetName}!A:Z`, // Append to the end of the sheet
        valueInputOption: 'RAW',
        insertDataOption: 'INSERT_ROWS',
        resource: {
          values: [rowData],
        },
      });

      console.log('Data appended to Google Sheets:', response.data);
      return { success: true, updatedRows: response.data.updates?.updatedRows || 1 };
    } catch (error) {
      console.error('Error appending data to Google Sheets:', error);
      throw new Error(`Failed to save data to Google Sheets: ${error.message}`);
    }
  }

  flattenChildrenData(children) {
    // Create a flattened array for children data (max 5 children)
    const maxChildren = 5;
    const flattenedData = [];
    
    for (let i = 0; i < maxChildren; i++) {
      if (children[i]) {
        const child = children[i];
        flattenedData.push(
          child.childName || '',
          child.childDateOfBirth || '',
          child.fatherName || '',
          child.motherName || '',
          child.educationStandard || '',
          child.childAadhar || ''
        );
      } else {
        // Fill with empty strings for missing children
        flattenedData.push('', '', '', '', '', '');
      }
    }
    
    return flattenedData;
  }

  async createSheetHeaders() {
    try {
      if (!this.sheets) {
        await this.initializeSheets();
      }

      // Headers for both sheets
      const eventHeaders = [
        'Registration ID',
        'Submission Date',
        'Form Type',
        'Full Name',
        'Email',
        'Mobile',
        'Date of Birth',
        'Address',
        'Aadhar Number',
        'Event Name',
        'Event Date',
        'Event Time',
        'Event Location',
        'Number of Children',
        // Children headers (Child 1)
        'Child 1 Name',
        'Child 1 DOB',
        'Child 1 Father',
        'Child 1 Mother',
        'Child 1 Standard',
        'Child 1 Aadhar',
        // Children headers (Child 2)
        'Child 2 Name',
        'Child 2 DOB',
        'Child 2 Father',
        'Child 2 Mother',
        'Child 2 Standard',
        'Child 2 Aadhar',
        // Children headers (Child 3)
        'Child 3 Name',
        'Child 3 DOB',
        'Child 3 Father',
        'Child 3 Mother',
        'Child 3 Standard',
        'Child 3 Aadhar',
        // Children headers (Child 4)
        'Child 4 Name',
        'Child 4 DOB',
        'Child 4 Father',
        'Child 4 Mother',
        'Child 4 Standard',
        'Child 4 Aadhar',
        // Children headers (Child 5)
        'Child 5 Name',
        'Child 5 DOB',
        'Child 5 Father',
        'Child 5 Mother',
        'Child 5 Standard',
        'Child 5 Aadhar'
      ];

      // Create headers for Event Registrations sheet
      await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.spreadsheetId,
        range: 'Event Registrations!A1:AZ1',
        valueInputOption: 'RAW',
        resource: {
          values: [eventHeaders],
        },
      });

      // Create headers for Admission Registrations sheet
      await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.spreadsheetId,
        range: 'Admission Registrations!A1:AZ1',
        valueInputOption: 'RAW',
        resource: {
          values: [eventHeaders],
        },
      });

      console.log('Sheet headers created successfully');
      return { success: true };
    } catch (error) {
      console.error('Error creating sheet headers:', error);
      throw new Error(`Failed to create sheet headers: ${error.message}`);
    }
  }

  async getRegistrationData(formType, limit = 100) {
    try {
      if (!this.sheets) {
        await this.initializeSheets();
      }

      const sheetName = formType === 'eventRegistration' ? 'Event Registrations' : 'Admission Registrations';
      
      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: `${sheetName}!A:AZ`,
      });

      return response.data.values || [];
    } catch (error) {
      console.error('Error fetching data from Google Sheets:', error);
      throw new Error(`Failed to fetch data from Google Sheets: ${error.message}`);
    }
  }
}

module.exports = GoogleSheetsService;
